SHELL FILE EDITOR

Create a file named subl (or any name you'd like for the command to call for Sublime Text) without extension
Put inside file this command (Replace the path for executable if necessary):
#!/bin/sh
"C:\Program Files\Sublime Text 2\sublime_text.exe" $1 &
Place that subl file inside the adequate command directory according to your OS and Sublime Text version (If you have doubts, check the above link comments section). In my case, I'm using Sublime Text 3 with Windows 10 64bit so I placed it in:
C:\Program Files (x86)\Git\usr\bin
Now, in order for you to open the desired file, in git bash use (within file folder)
subl filename


GIT CONFIFIGURATIONS


git config					// gives you config list
git config --global --list		// list global config (ex. name, email)
git config --global --edit		// will open config file in the default editor
git congig user.email "XXX"		// will change the user email for current project (different projects can have different configs, stored in .git/config)
git config 					// is the same as "git config --local"
git config --global user.name "XXX"	// global configs are shared by all the projects, but are over1written by local configs (just a theory)
git config --system user.name "XXX"	// dono dont care atm

git config --global core.editor "'C:\Users\melon\AppData\Local\atom\app-1.8.0\atom.exe' -multiInst"
							// will set up your editor for you
git add --help					// will open a man page online (add is just an example)
git add -help					// will show all the possible commands in the prompt

GIT CREATE ALLIAS

git config --global --edit		// run this

[alias]
		history = !sh -c 'git log --pretty=format:\"%h %s\" --graph'
// now git history will show a graph instead

// aliases
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.unstage 'reset HEAD --'
git config --global alias.last 'log -1 HEAD'
!!!
git config --global alias.visual '!gitk'






GIT WORKFLOW

git checkout . 					// reset all modified unstaged files
git checkout -- filename		// correct way to reset 1 modified file

git add .						// stage all the files
git add *.exe					// stage all the files wtih .exe extention
git add dir/					// add everything in the directory
git add file_name.txt			// add a specific file

git reset 					    // unstage all the files, rest of the commands will act by analogy with add

git commit -a -m 'fixed the broken email address'
								// commit and merge at the same command
git commit -m "message"			// commits staged filed to a current local branch
git commit 						// opens a core editor where you can write a bigger and more elaborate message
git commit --amend				// will append some more files to your commit (only staged files)



git clone [url]				// clones external repository
git clone [url] dir_name			// clones external repository with your own directory name

git status 					// shows info of current working directory.
git status -v				// shows all the changes (every line)/verbose
git status -s 				// short status


git diff					// shows difference between unstaged and commited/staged
git diff --staged 			// shows diff between staged and commited

git rm file					// removes file
git mv file					// renames file

// commit

git commit					// open a default editor for commit message
git commit -m "message"		// commit with short message

git reset HEAD~1			// reset a commit



GIT IGNORE

// if not working
git rm -r --cached .
git add .
git commit -m "fixing .gitignore"

atom .gitignore 			// opens a file with atom editor.
							// git ignore contains names of the files to be ignored, they are specified with regular expressions or
							// full names ex. hello.txt
							// # used for comments



GIT REMOTES

// to add your project to remote
// create a remote on github acc or using curl ex. https://github.com/SolusProject/local.git


git remote add naughty-raccoon https://github.com/SolusProject/local
							// adds a remote brunch called origin for a project
git push --set-upstream origin naughty-raccoon
							// pushed your local naughty-raccoon to a remote naughty-raccoon

git push remote local		// push to remote branch which has not the same name that your local brunch

git remote -v				// address of the remote


// create a separate brunch almond-kiss locally and remotely
git checkout -b almond-kiss
git remote add remote_name https://github.com/SolusProject/local
git push --set-upstream remote_name almond-kiss

git remote rename old new 	// rename remote
git remote rm old			// remove remote




find a difference in between origin/master and origin/crimson
							 origin/master and crimson/master when creating remotes
							 // origin/master means there is a repo called origin with a brunch master
							 // origin/crimson means there is a repo origin with a brunch master
							 // crimson/master is another repo with a brunch master

							 // brunch is always the same as your local brunch name
							 // thus if you have pushed from brunch sobaka, to a remote crimson
							 // it will be crimson/sobaka


GIT TAGGING

git tag 					// show all the tags
git tag -l "xxx*"			// show all the tags that start with 'xxx'
git tag -a v0.0.1 -m "msg"	// annotated tag
git tag v0.0.1 				// pointer to a branch tag (light version)
git tag -a v1.0.0 9fceb02	// tag a brunch in the past
git show v1.0.0				// show a tag
git push origin --tags		// push all the tags to a remote (need to do it separately)
git push origin v0.0.1		// push one tag where v0.0.1 is a name of the tag
checkout -b [branchname] [tagname]:
							// put a tag on the branch ???
git tag -d name name1 		// delete 2 tags





BRANCHING STRATEGY

git checkout -b b_name		// creates the branch which will be on the same lvl as your master
git commit -m ""			// puts the current branch ahead
git checout master			// MOVES BACK TO MASTER
git merge --no-ff b_name 	// merges current brunch with master
git branch -d b_name		//

git branch --merged			// shows the merged branches
git branch --no-merged		// show not yet merged branches
git branch -v				// shows all the branches and star next to the branch you are on
git branch -d b_name		// can delete only already merged branch -D for force delete

git pull					// copy remote branch and merge it with local
git fetch					// copy remote to your local without merging (so you can see if there were diffs)
 							// also it will put you behind on the tree
git clone -o booyah link	// will give a name "booyah" to your remote branch for link
